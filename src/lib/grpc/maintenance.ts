// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "maintenance.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MaintenancePurgeCacheRequest
 */
export interface MaintenancePurgeCacheRequest {
}
/**
 * @generated from protobuf message MaintenancePurgeCacheResponse
 */
export interface MaintenancePurgeCacheResponse {
    /**
     * @generated from protobuf field: bool IsSuccess = 1
     */
    isSuccess: boolean;
}
/**
 * @generated from protobuf message MaintenanceUpdateLibraryRequest
 */
export interface MaintenanceUpdateLibraryRequest {
}
/**
 * @generated from protobuf message MaintenanceUpdateLibraryResponse
 */
export interface MaintenanceUpdateLibraryResponse {
    /**
     * @generated from protobuf field: bool IsSuccess = 1
     */
    isSuccess: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class MaintenancePurgeCacheRequest$Type extends MessageType<MaintenancePurgeCacheRequest> {
    constructor() {
        super("MaintenancePurgeCacheRequest", []);
    }
    create(value?: PartialMessage<MaintenancePurgeCacheRequest>): MaintenancePurgeCacheRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenancePurgeCacheRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenancePurgeCacheRequest): MaintenancePurgeCacheRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenancePurgeCacheRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaintenancePurgeCacheRequest
 */
export const MaintenancePurgeCacheRequest = new MaintenancePurgeCacheRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenancePurgeCacheResponse$Type extends MessageType<MaintenancePurgeCacheResponse> {
    constructor() {
        super("MaintenancePurgeCacheResponse", [
            { no: 1, name: "IsSuccess", kind: "scalar", jsonName: "IsSuccess", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MaintenancePurgeCacheResponse>): MaintenancePurgeCacheResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isSuccess = false;
        if (value !== undefined)
            reflectionMergePartial<MaintenancePurgeCacheResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenancePurgeCacheResponse): MaintenancePurgeCacheResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool IsSuccess */ 1:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenancePurgeCacheResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool IsSuccess = 1; */
        if (message.isSuccess !== false)
            writer.tag(1, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaintenancePurgeCacheResponse
 */
export const MaintenancePurgeCacheResponse = new MaintenancePurgeCacheResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceUpdateLibraryRequest$Type extends MessageType<MaintenanceUpdateLibraryRequest> {
    constructor() {
        super("MaintenanceUpdateLibraryRequest", []);
    }
    create(value?: PartialMessage<MaintenanceUpdateLibraryRequest>): MaintenanceUpdateLibraryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MaintenanceUpdateLibraryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceUpdateLibraryRequest): MaintenanceUpdateLibraryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceUpdateLibraryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaintenanceUpdateLibraryRequest
 */
export const MaintenanceUpdateLibraryRequest = new MaintenanceUpdateLibraryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaintenanceUpdateLibraryResponse$Type extends MessageType<MaintenanceUpdateLibraryResponse> {
    constructor() {
        super("MaintenanceUpdateLibraryResponse", [
            { no: 1, name: "IsSuccess", kind: "scalar", jsonName: "IsSuccess", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MaintenanceUpdateLibraryResponse>): MaintenanceUpdateLibraryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isSuccess = false;
        if (value !== undefined)
            reflectionMergePartial<MaintenanceUpdateLibraryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaintenanceUpdateLibraryResponse): MaintenanceUpdateLibraryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool IsSuccess */ 1:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaintenanceUpdateLibraryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool IsSuccess = 1; */
        if (message.isSuccess !== false)
            writer.tag(1, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MaintenanceUpdateLibraryResponse
 */
export const MaintenanceUpdateLibraryResponse = new MaintenanceUpdateLibraryResponse$Type();
/**
 * @generated ServiceType for protobuf service Maintenance
 */
export const Maintenance = new ServiceType("Maintenance", [
    { name: "PurgeCache", options: {}, I: MaintenancePurgeCacheRequest, O: MaintenancePurgeCacheResponse },
    { name: "UpdateLibrary", options: {}, I: MaintenanceUpdateLibraryRequest, O: MaintenanceUpdateLibraryResponse }
]);
