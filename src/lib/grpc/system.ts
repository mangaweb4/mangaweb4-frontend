// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "system.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SystemInfoRequest
 */
export interface SystemInfoRequest {
}
/**
 * @generated from protobuf message SystemInfoResponse
 */
export interface SystemInfoResponse {
    /**
     * @generated from protobuf field: string Version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: int32 ItemCount = 2
     */
    itemCount: number;
    /**
     * @generated from protobuf field: int32 TagCount = 3
     */
    tagCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SystemInfoRequest$Type extends MessageType<SystemInfoRequest> {
    constructor() {
        super("SystemInfoRequest", []);
    }
    create(value?: PartialMessage<SystemInfoRequest>): SystemInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SystemInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemInfoRequest): SystemInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SystemInfoRequest
 */
export const SystemInfoRequest = new SystemInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemInfoResponse$Type extends MessageType<SystemInfoResponse> {
    constructor() {
        super("SystemInfoResponse", [
            { no: 1, name: "Version", kind: "scalar", jsonName: "Version", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ItemCount", kind: "scalar", jsonName: "ItemCount", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "TagCount", kind: "scalar", jsonName: "TagCount", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SystemInfoResponse>): SystemInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.itemCount = 0;
        message.tagCount = 0;
        if (value !== undefined)
            reflectionMergePartial<SystemInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemInfoResponse): SystemInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Version */ 1:
                    message.version = reader.string();
                    break;
                case /* int32 ItemCount */ 2:
                    message.itemCount = reader.int32();
                    break;
                case /* int32 TagCount */ 3:
                    message.tagCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* int32 ItemCount = 2; */
        if (message.itemCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.itemCount);
        /* int32 TagCount = 3; */
        if (message.tagCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.tagCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SystemInfoResponse
 */
export const SystemInfoResponse = new SystemInfoResponse$Type();
/**
 * @generated ServiceType for protobuf service System
 */
export const System = new ServiceType("System", [
    { name: "Info", options: {}, I: SystemInfoRequest, O: SystemInfoResponse }
]);
