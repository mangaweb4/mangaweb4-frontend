// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "history.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message HistoryListRequest
 */
export interface HistoryListRequest {
    /**
     * @generated from protobuf field: string User = 1
     */
    user: string;
    /**
     * @generated from protobuf field: int32 Page = 2
     */
    page: number;
    /**
     * @generated from protobuf field: int32 ItemPerPage = 3
     */
    itemPerPage: number;
}
/**
 * @generated from protobuf message HistoryListResponse
 */
export interface HistoryListResponse {
    /**
     * @generated from protobuf field: int32 TotalPage = 1
     */
    totalPage: number;
    /**
     * @generated from protobuf field: repeated HistoryListResponseItem Items = 2
     */
    items: HistoryListResponseItem[];
}
/**
 * @generated from protobuf message HistoryListResponseItem
 */
export interface HistoryListResponseItem {
    /**
     * @generated from protobuf field: int32 Id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string Name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: bool IsFavorite = 3
     */
    isFavorite: boolean;
    /**
     * @generated from protobuf field: bool IsRead = 4
     */
    isRead: boolean;
    /**
     * @generated from protobuf field: int32 PageCount = 5
     */
    pageCount: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp AccessTime = 6
     */
    accessTime?: Timestamp;
    /**
     * @generated from protobuf field: bool HasFavoriteTag = 7
     */
    hasFavoriteTag: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class HistoryListRequest$Type extends MessageType<HistoryListRequest> {
    constructor() {
        super("HistoryListRequest", [
            { no: 1, name: "User", kind: "scalar", jsonName: "User", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Page", kind: "scalar", jsonName: "Page", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ItemPerPage", kind: "scalar", jsonName: "ItemPerPage", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<HistoryListRequest>): HistoryListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.page = 0;
        message.itemPerPage = 0;
        if (value !== undefined)
            reflectionMergePartial<HistoryListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryListRequest): HistoryListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string User */ 1:
                    message.user = reader.string();
                    break;
                case /* int32 Page */ 2:
                    message.page = reader.int32();
                    break;
                case /* int32 ItemPerPage */ 3:
                    message.itemPerPage = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string User = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* int32 Page = 2; */
        if (message.page !== 0)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* int32 ItemPerPage = 3; */
        if (message.itemPerPage !== 0)
            writer.tag(3, WireType.Varint).int32(message.itemPerPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HistoryListRequest
 */
export const HistoryListRequest = new HistoryListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryListResponse$Type extends MessageType<HistoryListResponse> {
    constructor() {
        super("HistoryListResponse", [
            { no: 1, name: "TotalPage", kind: "scalar", jsonName: "TotalPage", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "Items", kind: "message", jsonName: "Items", repeat: 2 /*RepeatType.UNPACKED*/, T: () => HistoryListResponseItem }
        ]);
    }
    create(value?: PartialMessage<HistoryListResponse>): HistoryListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalPage = 0;
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<HistoryListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryListResponse): HistoryListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 TotalPage */ 1:
                    message.totalPage = reader.int32();
                    break;
                case /* repeated HistoryListResponseItem Items */ 2:
                    message.items.push(HistoryListResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 TotalPage = 1; */
        if (message.totalPage !== 0)
            writer.tag(1, WireType.Varint).int32(message.totalPage);
        /* repeated HistoryListResponseItem Items = 2; */
        for (let i = 0; i < message.items.length; i++)
            HistoryListResponseItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HistoryListResponse
 */
export const HistoryListResponse = new HistoryListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HistoryListResponseItem$Type extends MessageType<HistoryListResponseItem> {
    constructor() {
        super("HistoryListResponseItem", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "IsFavorite", kind: "scalar", jsonName: "IsFavorite", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "IsRead", kind: "scalar", jsonName: "IsRead", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "PageCount", kind: "scalar", jsonName: "PageCount", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "AccessTime", kind: "message", jsonName: "AccessTime", T: () => Timestamp },
            { no: 7, name: "HasFavoriteTag", kind: "scalar", jsonName: "HasFavoriteTag", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HistoryListResponseItem>): HistoryListResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.isFavorite = false;
        message.isRead = false;
        message.pageCount = 0;
        message.hasFavoriteTag = false;
        if (value !== undefined)
            reflectionMergePartial<HistoryListResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HistoryListResponseItem): HistoryListResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 Id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string Name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool IsFavorite */ 3:
                    message.isFavorite = reader.bool();
                    break;
                case /* bool IsRead */ 4:
                    message.isRead = reader.bool();
                    break;
                case /* int32 PageCount */ 5:
                    message.pageCount = reader.int32();
                    break;
                case /* google.protobuf.Timestamp AccessTime */ 6:
                    message.accessTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.accessTime);
                    break;
                case /* bool HasFavoriteTag */ 7:
                    message.hasFavoriteTag = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HistoryListResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 Id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string Name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool IsFavorite = 3; */
        if (message.isFavorite !== false)
            writer.tag(3, WireType.Varint).bool(message.isFavorite);
        /* bool IsRead = 4; */
        if (message.isRead !== false)
            writer.tag(4, WireType.Varint).bool(message.isRead);
        /* int32 PageCount = 5; */
        if (message.pageCount !== 0)
            writer.tag(5, WireType.Varint).int32(message.pageCount);
        /* google.protobuf.Timestamp AccessTime = 6; */
        if (message.accessTime)
            Timestamp.internalBinaryWrite(message.accessTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bool HasFavoriteTag = 7; */
        if (message.hasFavoriteTag !== false)
            writer.tag(7, WireType.Varint).bool(message.hasFavoriteTag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HistoryListResponseItem
 */
export const HistoryListResponseItem = new HistoryListResponseItem$Type();
/**
 * @generated ServiceType for protobuf service History
 */
export const History = new ServiceType("History", [
    { name: "List", options: {}, I: HistoryListRequest, O: HistoryListResponse }
]);
