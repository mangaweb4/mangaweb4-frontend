// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "user.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UserInfoRequest
 */
export interface UserInfoRequest {
    /**
     * @generated from protobuf field: string User = 1
     */
    user: string;
}
/**
 * @generated from protobuf message UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * @generated from protobuf field: int32 userId = 1
     */
    userId: number;
    /**
     * @generated from protobuf field: int32 favoriteItemCount = 2
     */
    favoriteItemCount: number;
    /**
     * @generated from protobuf field: int32 favoriteTagCount = 3
     */
    favoriteTagCount: number;
    /**
     * @generated from protobuf field: int32 readItemCount = 4
     */
    readItemCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserInfoRequest$Type extends MessageType<UserInfoRequest> {
    constructor() {
        super("UserInfoRequest", [
            { no: 1, name: "User", kind: "scalar", jsonName: "User", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfoRequest>): UserInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        if (value !== undefined)
            reflectionMergePartial<UserInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfoRequest): UserInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string User */ 1:
                    message.user = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string User = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserInfoRequest
 */
export const UserInfoRequest = new UserInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserInfoResponse$Type extends MessageType<UserInfoResponse> {
    constructor() {
        super("UserInfoResponse", [
            { no: 1, name: "userId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "favoriteItemCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "favoriteTagCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "readItemCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserInfoResponse>): UserInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.favoriteItemCount = 0;
        message.favoriteTagCount = 0;
        message.readItemCount = 0;
        if (value !== undefined)
            reflectionMergePartial<UserInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserInfoResponse): UserInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 userId */ 1:
                    message.userId = reader.int32();
                    break;
                case /* int32 favoriteItemCount */ 2:
                    message.favoriteItemCount = reader.int32();
                    break;
                case /* int32 favoriteTagCount */ 3:
                    message.favoriteTagCount = reader.int32();
                    break;
                case /* int32 readItemCount */ 4:
                    message.readItemCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 userId = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* int32 favoriteItemCount = 2; */
        if (message.favoriteItemCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.favoriteItemCount);
        /* int32 favoriteTagCount = 3; */
        if (message.favoriteTagCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.favoriteTagCount);
        /* int32 readItemCount = 4; */
        if (message.readItemCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.readItemCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserInfoResponse
 */
export const UserInfoResponse = new UserInfoResponse$Type();
/**
 * @generated ServiceType for protobuf service User
 */
export const User = new ServiceType("User", [
    { name: "Info", options: {}, I: UserInfoRequest, O: UserInfoResponse }
]);
